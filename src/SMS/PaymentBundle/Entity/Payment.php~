<?php

namespace SMS\PaymentBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Payment
 *
 * @ORM\Table(name="payment")
 * @UniqueEntity(fields={"month" , "paymentType" , "student", "establishment"} , errorPath="month")
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="SMS\PaymentBundle\Repository\PaymentRepository")
 */
class Payment
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="month", type="string", length=2)
     * @Assert\Choice({"1" , "2" , "3" ,  "4" ,"5" , "6" , "7" ,"8" ,"9"  , "10"  ,"11"  , "12"})
     * @Assert\NotBlank()
     */
    private $month;

    /**
     * @var int
     *
     * @ORM\Column(name="price", type="float")
     * @Assert\NotBlank()
     * @Assert\Range(min = 0, max = 99999999999999)
     */
    private $price;

    /**
     * @var int
     *
     * @ORM\Column(name="credit", type="float" , nullable = true)
     */
    private $credit;

    /**
     * Many Payments have One PaymentType.
     * @Assert\NotBlank()
     * @ORM\ManyToOne(targetEntity="PaymentType", inversedBy="payments" ,fetch="EXTRA_LAZY")
     * @ORM\JoinColumn(name="type_payment_id", referencedColumnName="id")
     */
    private $paymentType;

    /**
     * One Student has Many Payments.
     * @ORM\ManyToOne(targetEntity="SMS\UserBundle\Entity\Student" ,fetch="EXTRA_LAZY")
     * @ORM\JoinColumn(name="student_id", referencedColumnName="id")
     */
    private $student;

    /**
     * One User has Many Payments.
     * @ORM\ManyToOne(targetEntity="SMS\UserBundle\Entity\User" ,fetch="EXTRA_LAZY")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $author;

    /**
     * @var datetime $created
     *
     * @ORM\Column(type="datetime")
     */
    protected $created;

    /**
     * @var datetime $updated
     *
     * @ORM\Column(type="datetime", nullable = true)
     */
    protected $updated;

    /**
    * @ORM\PrePersist
    * @ORM\PreUpdate
    */
   public function updatedTimestamps()
   {
       $this->setUpdated(new \DateTime('now'));

       if ($this->getCreated() == null) {
           $this->setCreated(new \DateTime('now'));
       }
   }
}
