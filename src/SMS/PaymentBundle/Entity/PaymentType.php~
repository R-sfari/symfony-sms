<?php

namespace SMS\PaymentBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * PaymentType
 *
 * @ORM\Table(name="payment_type")
 * @ORM\HasLifecycleCallbacks
 * @UniqueEntity(fields={"paymentTypeName" , "establishment"} , errorPath="paymentTypeName")
 * @ORM\Entity(repositoryClass="SMS\PaymentBundle\Repository\PaymentTypeRepository")
 */
class PaymentType
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="TypePaymentName", type="string", length=100)
     * @Assert\NotBlank()
     * @Assert\Length(min = 2, max = 99)
     * @Assert\Regex(pattern="/^[a-z0-9 .\-]+$/i" ,match=true)
     */
    private $TypePaymentName;

    /**
     * @var int
     *
     * @ORM\Column(name="price", type="float")
     * @Assert\NotBlank()
     * @Assert\Range(
     *      min = 0,
     *      max = 99999999999999)
     */
    private $price;

    /**
     * @var int
     *
     * @ORM\Column(name="registrationFee", type="float")
     * @Assert\NotBlank()
     * @Assert\Range(
     *      min = 0,
     *      max = 99999999999999)
     */
    private $registrationFee;

    /**
     * One PaymentType has Many Payments.
     * @ORM\OneToMany(targetEntity="Payment", mappedBy="paymentType",fetch="EXTRA_LAZY")
     */
    private $payments;

    /**
     * One establishment has Many PaymentType.
     * @ORM\ManyToOne(targetEntity="SMS\EstablishmentBundle\Entity\Establishment" ,fetch="EXTRA_LAZY")
     * @ORM\JoinColumn(name="establishment_id", referencedColumnName="id")
     */
    private $establishment;


    /**
     * One User has Many Payments.
     * @ORM\ManyToOne(targetEntity="SMS\UserBundle\Entity\User" ,fetch="EXTRA_LAZY")
     * @ORM\JoinColumn(name="user_id", referencedColumnName="id")
     */
    private $author;

    /**
     * @var datetime $created
     *
     * @ORM\Column(type="datetime")
     */
    private $created;

    /**
     * @var datetime $updated
     *
     * @ORM\Column(type="datetime", nullable = true)
     */
    private $updated;

    /**
     * One Payments has Many Users.
     * @ORM\ManyToMany(targetEntity="SMS\UserBundle\Entity\Student" ,fetch="EXTRA_LAZY")
     * @ORM\JoinTable(name="payments_users",
     *      joinColumns={@ORM\JoinColumn(name="users_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="payments_id", referencedColumnName="id")}
     *      )
     */
    private $student;

    /**
    * @ORM\PrePersist
    * @ORM\PreUpdate
    */
   public function updatedTimestamps()
   {
       $this->setUpdated(new \DateTime('now'));

       if ($this->getCreated() == null) {
           $this->setCreated(new \DateTime('now'));
       }
   }


}
